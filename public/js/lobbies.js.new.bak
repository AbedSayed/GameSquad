// Lobbies namespace
window.Lobby = {
    // Game name mappings to handle variations
    gameNameMappings: {
        'cs2': ['csgo', 'cs:go', 'counter-strike', 'counter strike','Counter-Strike 2'],
        'csgo': ['cs2', 'cs:go', 'counter-strike', 'counter strike'],
        'cs:go': ['cs2', 'csgo', 'counter-strike', 'counter strike'],
        'counter-strike': ['cs2', 'csgo', 'cs:go', 'counter strike'],
        'valorant': ['valorant'],
        'lol': ['league of legends', 'league'],
        'league of legends': ['lol', 'league'],
        'apex': ['apex legends'],
        'apex legends': ['apex'],
        'dota 2': ['dota2', 'dota'],
        'dota2': ['dota 2', 'dota']
    },
    
    // Normalize game name to handle variations
    normalizeGameName(gameName) {
        if (!gameName) return '';
        
        gameName = gameName.trim().toLowerCase();
        
        // Common abbreviations and full names mapping
        const gameNameMap = {
            'lol': 'league of legends',
            'league': 'league of legends',
            'cs': 'counter-strike',
            'cs2': 'counter-strike 2',
            'csgo': 'counter-strike: global offensive',
            'cs:go': 'counter-strike: global offensive',
            'cod': 'call of duty',
            'valorant': 'valorant',
            'val': 'valorant',
            'ow': 'overwatch',
            'ow2': 'overwatch 2',
            'overwatch2': 'overwatch 2',
            'dota': 'dota 2',
            'dota2': 'dota 2',
            'apex': 'apex legends',
            'fortnite': 'fortnite',
            'fn': 'fortnite',
            'r6': 'rainbow six siege',
            'r6s': 'rainbow six siege',
            'pubg': 'playerunknown\'s battlegrounds',
            'tft': 'teamfight tactics',
            'wow': 'world of warcraft',
            'rl': 'rocket league'
        };
        
        // Check if the input matches any of our known game names or aliases
        return gameNameMap[gameName] || gameName;
    },
    
    // Function to load lobbies from the API or localStorage
    async loadLobbies(filters = {}) {
        console.log('Loading lobbies with filters:', filters);
        
        // Show loading state in containers
        const myLobbiesContainer = document.getElementById('myLobbies');
        const otherLobbiesContainer = document.getElementById('otherLobbies');
        
        if (myLobbiesContainer) {
            myLobbiesContainer.innerHTML = `
                <div class="loading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading your lobbies...</p>
                </div>
            `;
        }
        
        if (otherLobbiesContainer) {
            otherLobbiesContainer.innerHTML = `
                <div class="loading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading available lobbies...</p>
                </div>
            `;
        }
        
        try {
            // Get the latest auth token
            const token = localStorage.getItem('authToken') || localStorage.getItem('token');
            
            // Determine the API URL - with fallback if config isn't available
            const apiUrl = window.APP_CONFIG && window.APP_CONFIG.API_URL 
                ? `${window.APP_CONFIG.API_URL}/lobbies`
                : 'http://localhost:3000/api/lobbies';
                
            console.log('Using API URL:', apiUrl);
            
            // Build query string from filters
            const queryParams = [];
            for (const [key, value] of Object.entries(filters)) {
                if (value && value !== 'all' && value !== '') {
                    queryParams.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
                }
            }
            
            const url = queryParams.length > 0 
                ? `${apiUrl}?${queryParams.join('&')}` 
                : apiUrl;
                
            console.log('Fetching lobbies from:', url);
            
            // Request options
            const options = {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            };
            
            // Add auth token if available
            if (token) {
                // Make sure we have a proper Bearer token format
                const tokenValue = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
                console.log('Using auth token:', tokenValue);
                options.headers['Authorization'] = tokenValue;
            }
            
            // Make API request with timeout
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 second timeout
            
            options.signal = controller.signal;
            
            let response;
            try {
                console.log('Sending API request with options:', options);
                response = await fetch(url, options);
                clearTimeout(timeoutId);
                console.log('API response status:', response.status);
            } catch (error) {
                clearTimeout(timeoutId);
                
                if (error.name === 'AbortError') {
                    console.warn('Request timed out, using localStorage fallback');
                    return this.loadLocalLobbies(filters);
                }
                
                console.error('Network error:', error);
                throw error;
            }
            
            // Handle API response status
            if (!response.ok) {
                // If unauthorized, try using localStorage instead
                if (response.status === 401) {
                    console.warn('Unauthorized API access, using localStorage fallback');
                    return this.loadLocalLobbies(filters);
                }
                
                // For other error codes
                const errorText = await response.text();
                console.error(`API error (${response.status}):`, errorText);
                throw new Error(`Failed to load lobbies: ${response.statusText}`);
            }
            
            // Parse JSON response
            const responseText = await response.text();
            console.log('API response text:', responseText);
            
            let data;
            try {
                data = JSON.parse(responseText);
            } catch (e) {
                console.error('Error parsing JSON:', e);
                throw new Error('Invalid JSON response from API');
            }
            
            console.log('Lobbies loaded from API:', data);
            
            // Check if data is in expected format (direct array or wrapped in data property)
            let lobbies = Array.isArray(data) ? data : null;
            
            // Check common API response formats
            if (!lobbies && data) {
                if (Array.isArray(data.data)) {
                    lobbies = data.data;
                } else if (Array.isArray(data.lobbies)) {
                    lobbies = data.lobbies;
                } else if (Array.isArray(data.results)) {
                    lobbies = data.results;
                } else if (data.success && Array.isArray(data.result)) {
                    lobbies = data.result;
                }
            }
            
            // If still no lobbies array found, fallback to localStorage
            if (!lobbies) {
                console.warn('Unexpected API response format, using localStorage fallback');
                return this.loadLocalLobbies(filters);
            }
            
            // Update local cache with the latest lobbies
            if (lobbies.length > 0) {
                localStorage.setItem('lobbies', JSON.stringify(lobbies));
            }
            
            // Display the lobbies
            this.displayLobbies(lobbies);
            return lobbies;
        } catch (error) {
            console.error('Error loading lobbies from API:', error);
            
            // Show error notification
            try {
                const notification = document.createElement('div');
                notification.className = 'notification error';
                notification.innerHTML = `
                    <i class="fas fa-exclamation-circle"></i>
                    <span>Error loading lobbies: ${error.message}</span>
                `;
                
                const container = document.querySelector('.notifications-container');
                if (container) container.appendChild(notification);
                
                // Remove notification after 5 seconds
                setTimeout(() => {
                    notification.classList.add('fade-out');
                    setTimeout(() => notification.remove(), 300);
                }, 5000);
            } catch (e) {
                console.error('Error displaying notification:', e);
            }
            
            // Fall back to localStorage
            return this.loadLocalLobbies(filters);
        }
    },

    // Fallback function to load lobbies from localStorage
    loadLocalLobbies(filters = {}) {
        console.log('Loading lobbies from localStorage with filters:', filters);
        
        // Get lobbies from localStorage
        let lobbies = JSON.parse(localStorage.getItem('lobbies') || '[]');
        
        // Ensure we have at least some demo data for a good user experience
        if (!lobbies || lobbies.length === 0) {
            lobbies = this.generateDemoLobbies();
            localStorage.setItem('lobbies', JSON.stringify(lobbies));
        }
        
        // Apply filters if any
        if (Object.keys(filters).length > 0) {
            lobbies = this.filterLobbies(lobbies, filters);
        }
        
        console.log('Lobbies loaded from localStorage:', lobbies);
        this.displayLobbies(lobbies);
        return lobbies;
    },

    // Filter lobbies based on criteria
    filterLobbies(lobbies, filters) {
        return lobbies.filter(lobby => {
            // Game filter
            if (filters.game && filters.game !== 'all' && 
                lobby.game && lobby.game.toLowerCase() !== filters.game.toLowerCase()) {
                return false;
            }
            
            // Region filter
            if (filters.region && filters.region !== 'all' && 
                lobby.region && lobby.region.toLowerCase() !== filters.region.toLowerCase()) {
                return false;
            }
            
            // Rank/skill filter
            if (filters.rank && filters.rank !== 'any') {
                const filterRankLevel = this.getRankLevel(filters.rank);
                const lobbyRankLevel = lobby.skillLevel || this.getRankLevel(lobby.rank);
                
                if (filterRankLevel > lobbyRankLevel) {
                    return false;
                }
            }
            
            // Status filter
            if (filters.status && filters.status !== 'all' && 
                lobby.status && lobby.status.toLowerCase() !== filters.status.toLowerCase()) {
                return false;
            }
            
            return true;
        });
    },

    // Helper function to convert rank to numeric skill level
    getRankLevel(rank) {
        if (!rank || rank === 'any') return 3; // Default to middle
        
        // Handle common rank patterns
        const rankLower = typeof rank === 'string' ? rank.toLowerCase() : '';
        
        if (rankLower.includes('iron') || rankLower.includes('bronze') || 
            rankLower.includes('rookie') || rankLower.includes('silver1') || 
            rankLower.includes('beginner')) {
            return 1;
        }
        
        if (rankLower.includes('silver') || rankLower.includes('gold') || 
            rankLower.includes('intermediate')) {
            return 2;
        }
        
        if (rankLower.includes('platinum') || rankLower.includes('diamond') || 
            rankLower.includes('advanced')) {
            return 3;
        }
        
        if (rankLower.includes('master') || rankLower.includes('immortal') || 
            rankLower.includes('ascendant') || rankLower.includes('expert')) {
            return 4;
        }
        
        if (rankLower.includes('radiant') || rankLower.includes('challenger') || 
            rankLower.includes('global') || rankLower.includes('predator')) {
            return 5;
        }
        
        return 3; // Default to middle
    },

    // Generate some demo lobbies for empty states
    generateDemoLobbies() {
        const userInfo = this.getUserInfo();
        const currentUserId = userInfo ? userInfo._id : 'current_user';
        
        const currentTimestamp = new Date().toISOString();
        
        return [
            {
                _id: 'demo_1',
                name: 'Competitive Valorant Team',
                game: 'valorant',
                gameType: 'FPS',
                currentPlayers: 3,
                maxPlayers: 5,
                region: 'na',
                language: 'english',
                skillLevel: 4,
                rank: 'diamond',
                createdAt: currentTimestamp,
                status: 'waiting',
                host: { _id: currentUserId, username: 'You' }
            },
            {
                _id: 'demo_2',
                name: 'Casual CS2 Lobby',
                game: 'csgo',
                gameType: 'FPS',
                currentPlayers: 2,
                maxPlayers: 5,
                region: 'eu',
                language: 'english',
                skillLevel: 3,
                rank: 'gold',
                createdAt: currentTimestamp,
                status: 'waiting',
                host: { _id: 'other_user_1', username: 'FragMaster' }
            },
            {
                _id: 'demo_3',
                name: 'League of Legends Ranked',
                game: 'lol',
                gameType: 'MOBA',
                currentPlayers: 3,
                maxPlayers: 5,
                region: 'na',
                language: 'english',
                skillLevel: 4,
                rank: 'platinum',
                createdAt: currentTimestamp,
                status: 'waiting',
                host: { _id: 'other_user_2', username: 'MidOrFeed' }
            },
            {
                _id: 'demo_4',
                name: 'Apex Legends Squad',
                game: 'apex',
                gameType: 'Battle Royale',
                currentPlayers: 1,
                maxPlayers: 3,
                region: 'asia',
                language: 'english',
                skillLevel: 3,
                rank: 'gold',
                createdAt: currentTimestamp,
                status: 'waiting',
                host: { _id: 'other_user_3', username: 'PathfinderMain' }
            }
        ];
    },

    // Function to display lobbies
    displayLobbies(data) {
        console.log('Displaying lobbies:', data);
        
        // Get the containers for my lobbies and other lobbies
        const myLobbiesContainer = document.getElementById('myLobbies');
        const otherLobbiesContainer = document.getElementById('otherLobbies');
        
        console.log('DOM elements found:', {
            myLobbiesContainer: !!myLobbiesContainer,
            otherLobbiesContainer: !!otherLobbiesContainer
        });
        
        // Exit early if containers not found
        if (!myLobbiesContainer || !otherLobbiesContainer) {
            console.error('Lobby containers not found in the DOM');
            return;
        }
        
        // Clear existing lobbies
        myLobbiesContainer.innerHTML = '';
        otherLobbiesContainer.innerHTML = '';

        // Handle null or empty data
        if (!data || !data.length) {
            // No lobbies found
            const noLobbiesHTML = `
                <div class="no-lobbies">
                    <i class="fas fa-users-slash"></i>
                    <p>No lobbies found. Try different filters or create your own!</p>
                </div>
            `;
            
            myLobbiesContainer.innerHTML = `
                <div class="no-lobbies">
                    <i class="fas fa-users-slash"></i>
                    <p>You don't have any active lobbies.</p>
                    <a href="create-lobby.html" class="btn btn-primary btn-hover-fx">
                        <i class="fas fa-plus"></i> Create Lobby
                    </a>
                </div>
            `;
            
            otherLobbiesContainer.innerHTML = noLobbiesHTML;
            return;
        }

        // Log first lobby data for debugging API format
        console.log('Sample lobby data format:', data[0]);

        // Get current user info to check if they're the host
        const userInfo = this.getUserInfo();
        const currentUserId = userInfo ? userInfo._id : null;
        console.log('Current user ID:', currentUserId);

        // Separate lobbies into user's lobbies and other lobbies
        const myLobbies = [];
        const otherLobbies = [];

        data.forEach(lobby => {
            // Check if the API format includes hostId or host
            const hostId = this.extractHostId(lobby);
            console.log(`Lobby ${lobby.name || lobby._id} - Host ID: ${hostId}, Current user ID: ${currentUserId}`);
            
            const isHost = currentUserId && hostId === currentUserId;
            
            if (isHost) {
                myLobbies.push(lobby);
            } else {
                otherLobbies.push(lobby);
            }
        });

        console.log(`Found ${myLobbies.length} user lobbies and ${otherLobbies.length} other lobbies`);
        
        // Add my lobbies
        if (myLobbies.length > 0) {
            let myLobbiesHTML = '';
            myLobbies.forEach(lobby => {
                myLobbiesHTML += this.createLobbyCardHTML(lobby, true);
            });
            myLobbiesContainer.innerHTML = myLobbiesHTML;
        } else {
            myLobbiesContainer.innerHTML = `
                <div class="no-lobbies">
                    <i class="fas fa-users-slash"></i>
                    <p>You don't have any active lobbies.</p>
                    <a href="create-lobby.html" class="btn btn-primary btn-hover-fx">
                        <i class="fas fa-plus"></i> Create Lobby
                    </a>
                </div>
            `;
        }
        
        // Add other lobbies
        if (otherLobbies.length > 0) {
            let otherLobbiesHTML = '';
            otherLobbies.forEach(lobby => {
                otherLobbiesHTML += this.createLobbyCardHTML(lobby, false);
            });
            otherLobbiesContainer.innerHTML = otherLobbiesHTML;
        } else {
            otherLobbiesContainer.innerHTML = `
                <div class="no-lobbies">
                    <i class="fas fa-users-slash"></i>
                    <p>No other lobbies available at the moment.</p>
                </div>
            `;
        }

        // Apply 3D hover effect to game cards
        const gameCards = document.querySelectorAll('.game-card');
        gameCards.forEach(card => {
            card.addEventListener('mousemove', function(e) {
                const rect = this.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                const centerX = rect.width / 2;
                const centerY = rect.height / 2;
                
                const angleX = (y - centerY) / 20;
                const angleY = (centerX - x) / 20;
                
                this.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg) scale3d(1.02, 1.02, 1.02)`;
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale3d(1, 1, 1)';
            });
        });

        // Add event listeners to join buttons
        this.setupJoinButtons();
    },

    // Helper function to extract host ID from different lobby formats
    extractHostId(lobby) {
        // Handle various API response formats
        if (!lobby) return null;
        
        // Format 1: If host is a string ID directly
        if (typeof lobby.host === 'string') {
            return lobby.host;
        }
        
        // Format 2: If host is an object with _id field
        if (typeof lobby.host === 'object' && lobby.host && lobby.host._id) {
            return lobby.host._id;
        }
        
        // Format 3: If there's a hostId field
        if (lobby.hostId) {
            return lobby.hostId;
        }
        
        // Format 4: If there's a userId field (some APIs use this)
        if (lobby.userId) {
            return lobby.userId;
        }
        
        // Format 5: If there's a createdBy field
        if (lobby.createdBy) {
            return typeof lobby.createdBy === 'object' ? lobby.createdBy._id : lobby.createdBy;
        }
        
        // Fallback to null
        return null;
    },

    // Create lobby card helper function
    createLobbyCardHTML(lobby, isOwned) {
        // Standardize lobby properties
        const lobbyData = this.standardizeLobbyData(lobby);
        
        // Get game type for badge
        let gameTypeClass = 'fps'; // Default
        const gameTypeLower = (lobbyData.gameType || '').toLowerCase();
        
        if (gameTypeLower.includes('moba') || gameTypeLower.includes('league') || gameTypeLower.includes('dota')) {
            gameTypeClass = 'moba';
        } else if (gameTypeLower.includes('battle') || gameTypeLower.includes('royale') || gameTypeLower.includes('apex') || gameTypeLower.includes('fortnite')) {
            gameTypeClass = 'battle-royale';
        } else if (gameTypeLower.includes('rpg') || gameTypeLower.includes('mmo')) {
            gameTypeClass = 'rpg';
        }
        
        // Determine game image based on game type
        let gameImage = '../recources/default-game.png';
        const gameLower = (lobbyData.game || '').toLowerCase();
        
        if (gameLower.includes('valorant')) {
            gameImage = '../recources/Valorant-Logo-PNG-Image.png';
        } else if (gameLower.includes('cs') || gameLower.includes('counter')) {
            gameImage = '../recources/counter-strike-png-.png';
        } else if (gameLower.includes('league') || gameLower.includes('lol')) {
            gameImage = '../recources/leageofLegend.png.png';
        } else if (gameLower.includes('apex')) {
            gameImage = '../recources/apex.png.png';
        }
        
        // Determine status class and text
        let statusClass = 'status-waiting';
        let statusText = 'Waiting';
        
        if (lobbyData.status) {
            const statusLower = lobbyData.status.toLowerCase();
            if (statusLower.includes('progress') || statusLower.includes('playing')) {
                statusClass = 'status-in-progress';
                statusText = 'In Progress';
            } else if (statusLower.includes('full')) {
                statusClass = 'status-full';
                statusText = 'Full';
            }
        }
        
        // Skill level (from 1-5)
        const skillLevel = lobbyData.skillLevel || 3;
        
        // Get host name
        const hostName = lobbyData.hostName || 'Unknown';
        
        // Generate skill level dots with proper active class
        let skillDots = '';
        for (let i = 0; i < 5; i++) {
            const isActive = i < skillLevel ? ' active' : '';
            skillDots += `<span class="skill-level-dot${isActive}"></span>`;
        }
        
        // Create simple HTML for the card
        return `
            <div class="game-card card hover-3d">
                <div class="game-badges">
                    <span class="game-badge ${gameTypeClass}">${lobbyData.gameType || 'Game'}</span>
                    <span class="status-badge ${statusClass}">${statusText}</span>
                </div>
                <img src="${gameImage}" alt="${this.escapeHtml(lobbyData.game || 'Game')}">
                <div class="game-info">
                    <h3 class="${isOwned ? 'glow-text' : ''}">${this.escapeHtml(lobbyData.name || 'Unnamed Lobby')}</h3>
                    <div class="skill-level" data-level="${skillLevel}">
                        ${skillDots}
                    </div>
                    <p><i class="fas fa-users"></i> Players: ${lobbyData.currentPlayers || 0}/${lobbyData.maxPlayers || 5}</p>
                    <p><i class="fas fa-crown"></i> Host: ${isOwned ? 'You' : this.escapeHtml(hostName)}</p>
                    <p><i class="fas fa-globe"></i> Region: ${this.escapeHtml(lobbyData.region || 'Any')}</p>
                    <div class="lobby-actions">
                        <a href="${lobbyData.lobbyUrl}" class="btn btn-primary join-btn btn-hover-fx">
                            <i class="fas fa-${isOwned ? 'door-open' : 'sign-in-alt'}"></i> <span>${isOwned ? 'Enter' : 'Join'}</span>
                        </a>
                    </div>
                </div>
            </div>
        `;
    },

    // Standardize different lobby data formats into consistent structure
    standardizeLobbyData(lobby) {
        const standardLobby = {
            _id: lobby._id || lobby.id || `lobby-${Math.random().toString(36).substring(2, 9)}`,
            name: lobby.name || lobby.lobbyName || lobby.title || 'Unnamed Lobby',
            game: lobby.game || lobby.gameName || lobby.gameTitle || '',
            gameType: lobby.gameType || lobby.genre || 'FPS',
            currentPlayers: lobby.currentPlayers || lobby.playerCount || lobby.players?.length || 1,
            maxPlayers: lobby.maxPlayers || lobby.capacity || lobby.maxSize || 5,
            region: lobby.region || lobby.location || lobby.server || 'Any',
            status: lobby.status || lobby.state || 'waiting',
            skillLevel: lobby.skillLevel || lobby.rank ? 
                (typeof lobby.skillLevel === 'number' ? lobby.skillLevel : 3) : 3,
            lobbyUrl: `lobby.html?id=${lobby._id || lobby.id || ''}`,
            hostName: this.extractHostName(lobby)
        };
        
        return standardLobby;
    },

    // Extract host name from different lobby formats
    extractHostName(lobby) {
        if (!lobby) return 'Unknown';
        
        // If host is an object with username or name
        if (typeof lobby.host === 'object' && lobby.host) {
            return lobby.host.username || lobby.host.name || 'Unknown';
        }
        
        // If creator is provided
        if (typeof lobby.creator === 'object' && lobby.creator) {
            return lobby.creator.username || lobby.creator.name || 'Unknown';
        }
        
        // If hostName is directly provided
        if (lobby.hostName) {
            return lobby.hostName;
        }
        
        // If there's a userName field (some APIs use this)
        if (lobby.userName) {
            return lobby.userName;
        }
        
        return 'Unknown';
    },

    // Function to setup join button handlers
    setupJoinButtons() {
        const joinButtons = document.querySelectorAll('.join-btn:not(.disabled)');
        
        joinButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                // The link navigation will happen automatically
                // This is just for any additional logic
                console.log('Join button clicked');
            });
        });
    },

    // Helper function to show notifications
    showNotification(message, type = 'error') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <i class="fas fa-${type === 'error' ? 'exclamation-circle' : 'check-circle'}"></i>
            <span>${message}</span>
        `;

        const container = document.querySelector('.notifications-container');
        container.appendChild(notification);

        // Remove notification after 5 seconds
        setTimeout(() => {
            notification.classList.add('fade-out');
            setTimeout(() => notification.remove(), 300);
        }, 5000);
    },

    // Helper function to escape HTML
    escapeHtml(unsafe) {
        if (!unsafe) return '';
        return String(unsafe)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    },

    // Get user info from localStorage
    getUserInfo() {
        try {
            const userInfo = localStorage.getItem('userInfo');
            
            // If we have valid user info, return it
            if (userInfo) {
                return JSON.parse(userInfo);
            }
            
            // For demonstration, create a mock user if none exists
            console.log('No user info found in localStorage, creating mock user');
            const mockUser = {
                _id: 'mock-user-id',
                username: 'Player1',
                email: 'player1@example.com'
            };
            
            // Store the mock user in localStorage
            localStorage.setItem('userInfo', JSON.stringify(mockUser));
            
            return mockUser;
        } catch (error) {
            console.error('Error parsing user info from localStorage:', error);
            
            // Return a default mock user in case of error
            return {
                _id: 'default-user-id',
                username: 'DefaultPlayer',
                email: 'default@example.com'
            };
        }
    },
};

// Initialize when the page loads
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM content loaded in lobbies.js');
    
    // Check if essential elements exist
    const myLobbiesElement = document.getElementById('myLobbies');
    const otherLobbiesElement = document.getElementById('otherLobbies');
    
    console.log('Essential elements check:', {
        myLobbies: myLobbiesElement ? 'Found' : 'Missing',
        otherLobbies: otherLobbiesElement ? 'Found' : 'Missing'
    });
    
    if (!myLobbiesElement || !otherLobbiesElement) {
        console.error('Essential lobby container elements missing!');
        alert('Error loading lobby data. Please try refreshing the page.');
    }
    
    // Check for URL parameters to apply filters
    const urlParams = new URLSearchParams(window.location.search);
    const initialFilters = {};
    
    // Get game parameter from URL, if present
    const gameParam = urlParams.get('game');
    if (gameParam) {
        initialFilters.game = window.Lobby.normalizeGameName(gameParam);
        console.log('Found game parameter in URL:', gameParam);
        console.log('Normalized to:', initialFilters.game);
    }
    
    // Get additional filters from URL (rank, region, status) if present
    ['rank', 'region', 'status'].forEach(param => {
        const value = urlParams.get(param);
        if (value) {
            initialFilters[param] = value;
        }
    });
    
    // Log the initial filters 
    console.log('Loading lobbies with initial filters:', initialFilters);
    
    // Load lobbies with URL parameters as filters
    window.Lobby.loadLobbies(initialFilters);
});